#pragma once

typedef float vec2[2];
typedef float vec3[3];
typedef float vec4[4];

/* api based on CGLM, with custom implementation */
void  vec2_copy(vec2 src, vec2 dest);
void  vec2_zero(vec2 v);
void  vec2_one(vec2 v);
float vec2_dot(vec2 a, vec2 b);
float vec2_cross(vec2 a, vec2 b);
float vec2_norm2(vec2 v);
float vec2_norm(vec2 vec);
void  vec2_add(vec2 a, vec2 b, vec2 dest);
void  vec2_addf(vec2 v, float s, vec2 dest);
void  vec2_sub(vec2 a, vec2 b, vec2 dest);
void  vec2_subf(vec2 v, float s, vec2 dest);
void  vec2_mul(vec2 a, vec2 b, vec2 d);
void  vec2_mulf(vec2 v, float s, vec2 dest);
void  vec2_div(vec2 a, vec2 b, vec2 dest);
void  vec2_divf(vec2 v, float s, vec2 dest);
void  vec2_negate(vec2 v);
void  vec2_negate_to(vec2 v, vec2 dest);
void  vec2_normalize(vec2 v);
void  vec2_normalize_to(vec2 vec, vec2 dest);
void  vec2_rotate(vec2 v, float angle, vec2 dest);
void  vec2_center(vec2 a, vec2 b, vec2 dest);
float vec2_distance2(vec2 a, vec2 b);
float vec2_distance(vec2 a, vec2 b);
void  vec2_max(vec2 v1, vec2 v2, vec2 dest);
void  vec2_min(vec2 v1, vec2 v2, vec2 dest);
void  vec2_maxf(vec2 v1, float s, vec2 dest);
void  vec2_minf(vec2 v1, float s, vec2 dest);
void  vec2_clamp(vec2 v, float min_val, float max_val);
void  vec2_swizzle(vec2 v, int mask, vec2 dest);
void  vec2_lerp(vec2 from, vec2 to, float t, vec2 dest);
void  vec2_step(vec2 edge, vec2 x, vec2 dest);
void  vec2_make(float* src, vec2 dest);
void  vec2_reflect(vec2 v, vec2 n, vec2 dest);

void  vec3_copy(vec3 src, vec3 dest);
void  vec3_zero(vec3 v);
void  vec3_one(vec3 v);
float vec3_dot(vec3 a, vec3 b);
float vec3_cross(vec3 a, vec3 b);
float vec3_norm2(vec3 v);
float vec3_norm(vec3 vec);
void  vec3_add(vec3 a, vec3 b, vec3 dest);
void  vec3_addf(vec3 v, float s, vec3 dest);
void  vec3_sub(vec3 a, vec3 b, vec3 dest);
void  vec3_subf(vec3 v, float s, vec3 dest);
void  vec3_mul(vec3 a, vec3 b, vec3 d);
void  vec3_mulf(vec3 v, float s, vec3 dest);
void  vec3_div(vec3 a, vec3 b, vec3 dest);
void  vec3_divf(vec3 v, float s, vec3 dest);
void  vec3_negate(vec3 v);
void  vec3_negate_to(vec3 v, vec3 dest);
void  vec3_normalize(vec3 v);
void  vec3_normalize_to(vec3 vec, vec3 dest);
void  vec3_rotate(vec3 v, float angle, vec3 dest);
void  vec3_center(vec3 a, vec3 b, vec3 dest);
float vec3_distance2(vec3 a, vec3 b);
float vec3_distance(vec3 a, vec3 b);
void  vec3_max(vec3 v1, vec3 v2, vec3 dest);
void  vec3_min(vec3 v1, vec3 v2, vec3 dest);
void  vec3_maxf(vec3 v1, float s, vec3 dest);
void  vec3_minf(vec3 v1, float s, vec3 dest);
void  vec3_clamp(vec3 v, float min_val, float max_val);
void  vec3_swizzle(vec3 v, int mask, vec3 dest);
void  vec3_lerp(vec3 from, vec3 to, float t, vec3 dest);
void  vec3_step(vec3 edge, vec3 x, vec3 dest);
void  vec3_make(float* src, vec3 dest);
void  vec3_reflect(vec3 v, vec3 n, vec3 dest);

void  vec4_copy(vec4 src, vec4 dest);
void  vec4_zero(vec4 v);
void  vec4_one(vec4 v);
float vec4_dot(vec4 a, vec4 b);
float vec4_cross(vec4 a, vec4 b);
float vec4_norm4(vec4 v);
float vec4_norm(vec4 vec);
void  vec4_add(vec4 a, vec4 b, vec4 dest);
void  vec4_addf(vec4 v, float s, vec4 dest);
void  vec4_sub(vec4 a, vec4 b, vec4 dest);
void  vec4_subf(vec4 v, float s, vec4 dest);
void  vec4_mul(vec4 a, vec4 b, vec4 d);
void  vec4_mulf(vec4 v, float s, vec4 dest);
void  vec4_div(vec4 a, vec4 b, vec4 dest);
void  vec4_divf(vec4 v, float s, vec4 dest);
void  vec4_negate(vec4 v);
void  vec4_negate_to(vec4 v, vec4 dest);
void  vec4_normalize(vec4 v);
void  vec4_normalize_to(vec4 vec, vec4 dest);
void  vec4_rotate(vec4 v, float angle, vec4 dest);
void  vec4_center(vec4 a, vec4 b, vec4 dest);
float vec4_distance4(vec4 a, vec4 b);
float vec4_distance(vec4 a, vec4 b);
void  vec4_max(vec4 v1, vec4 v4, vec4 dest);
void  vec4_min(vec4 v1, vec4 v4, vec4 dest);
void  vec4_maxf(vec4 v1, float s, vec4 dest);
void  vec4_minf(vec4 v1, float s, vec4 dest);
void  vec4_clamp(vec4 v, float min_val, float max_val);
void  vec4_swizzle(vec4 v, int mask, vec4 dest);
void  vec4_lerp(vec4 from, vec4 to, float t, vec4 dest);
void  vec4_step(vec4 edge, vec4 x, vec4 dest);
void  vec4_make(float* src, vec4 dest);
void  vec4_reflect(vec4 v, vec4 n, vec4 dest);
